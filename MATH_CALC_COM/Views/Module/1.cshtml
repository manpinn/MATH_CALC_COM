@{
    ViewData["Title"] = "Module Linear Regression";
}
<h1 class="display-4 text-center border-bottom">Linear Regression</h1>

<p>Here you can find a Visualization of Linear Regression.</p>

<div class="ml-spinner" style="display: none; align-items: center; margin-top:10px; margin-bottom:10px;">
    <div class="spinner-grow text-secondary" role="status"></div>
    <div style="margin-left: 10px;">Loading...</div>
</div>

<div id="chartDiv"></div>
<br>

<div class="d-grid gap-2 d-md-flex">
    <button id="btn-calculate" class="btn btn-primary" type="button">Calculate</button>
    <button id="btn-example-data" class="btn btn-primary" type="button">Example Data</button>
</div>
<br>
<div class="input-group">
    <span class="input-group-text">x1; y1;</span>
    <input aria-label="First name" class="form-control" id="input-x1" type="number" step="0.01">
    <input aria-label="Last name" class="form-control" id="input-y1" type="number" step="0.01">
</div>
<br>
<div class="input-group">
    <span class="input-group-text">x2; y2;</span>
    <input aria-label="First name" class="form-control" id="input-x2" type="number" step="0.01">
    <input aria-label="Last name" class="form-control" id="input-y2" type="number" step="0.01">
</div>
<br>
<div class="input-group">
    <span class="input-group-text">x3; y3;</span>
    <input aria-label="First name" class="form-control" id="input-x3" type="number" step="0.01">
    <input aria-label="Last name" class="form-control" id="input-y3" type="number" step="0.01">
</div>
<br>
<div class="input-group">
    <span class="input-group-text">x4; y4;</span>
    <input aria-label="First name" class="form-control" id="input-x4" type="number" step="0.01">
    <input aria-label="Last name" class="form-control" id="input-y4" type="number" step="0.01">
</div>
<br>
<div class="input-group">
    <span class="input-group-text">x5; y5;</span>
    <input aria-label="First name" class="form-control" id="input-x5" type="number" step="0.01">
    <input aria-label="Last name" class="form-control" id="input-y5" type="number" step="0.01">
</div>

<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<script type="text/javascript">

    class LinearRegressionGraph {
        constructor(name, degree) {
            this.name = name;
            this.degree = degree;
        }
    }

    class AJAX_LinearRegression_Model {
        constructor(graphs, x_vector, y_vector) {
            this.graphs = graphs;
            this.x_vector = x_vector;
            this.y_vector = y_vector;
        }
    }

    let arrayX = [];
    let arrayY = [];

    var button = document.getElementById('btn-calculate');



    function calculate() {
        //alert('Hello, World!');

        document.querySelector('.ml-spinner').style.display = 'flex';

        let retVal = getValues();

        if (retVal == -1)
        {
            document.querySelector('.ml-spinner').style.display = 'none';
            return;
        }

        const graph1 = new LinearRegressionGraph("Regression Straight", 1);
        //const graph2 = new LinearRegressionGraph("Graph 2", 5);

        const model = new AJAX_LinearRegression_Model([graph1], arrayX, arrayY);

        let url = '/Module/AJAX/LinearRegression';
        let data = model;
        let serverData = {};

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(response => response.json())
            .then(data => {
                serverData = data;
                console.log(serverData);

                //var chartJson = '@Html.Raw(ViewData["ChartJson"])';
                var chartData = JSON.parse(serverData);
                var layout = {
                    title: 'Scroll and Zoom'
                };

                Plotly.newPlot('chartDiv', chartData.Fields[0], layout, { responsive: true, scrollZoom: true, displayModeBar: true });

                document.querySelector('.ml-spinner').style.display = 'none';
            })
            .catch((error) => {
          
                document.querySelector('.ml-spinner').style.display = 'none';

                console.error('Error:', error);
            });

        
    }

    function getValues() {

        arrayX = [];
        arrayY = [];

        for (let i = 0; i < 5; i++){
            const input_x = document.getElementById(`input-x${i + 1}`);
            const input_y = document.getElementById(`input-y${i + 1}`);

            if (input_x && input_y && input_x.value && input_y.value) {
                arrayX.push(input_x.value);
                arrayY.push(input_y.value);
            }
        }

        if (!arrayX || !arrayY) {
            console.log("One or both arrays are null.");
            return -1;
        }

        if (arrayX.length === 0 || arrayY.length === 0) {
            console.log("One or both arrays are empty.");
            return -1;
        }

        if (arrayX.length < 2 || arrayY.length < 2) {
            console.log("One or both arrays do not have at least 2 value pairs.");
            return -1;
        }

        if (arrayX.length !== arrayY.length) {
            console.log("Arrays do not have the same length.");
            return -1;
        }

        let pairedArray = arrayX.map((x, index) => ({ x: x, y: arrayY[index] }));

        pairedArray.sort((a, b) => a.x - b.x);

        arrayX = pairedArray.map(pair => pair.x);
        arrayY = pairedArray.map(pair => pair.y);

        return 1;
    }

    button.addEventListener('click', calculate);


</script>  